// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`extractors > should create a zod schema for a 'array' type 1`] = `
ZodOptional {
  "_def": {
    "description": "List of owners of the pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodArray {
      "_def": {
        "description": "List of owners of the pet that needs to be updated",
        "exactLength": null,
        "maxLength": null,
        "minLength": null,
        "type": ZodAny {
          "_any": true,
          "_def": {
            "typeName": "ZodAny",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "typeName": "ZodArray",
      },
      "and": [Function],
      "array": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'boolean' type 1`] = `
ZodOptional {
  "_def": {
    "description": "Status of pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodBoolean {
      "_def": {
        "coerce": false,
        "description": "Status of pet that needs to be updated",
        "typeName": "ZodBoolean",
      },
      "and": [Function],
      "array": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'integer not required' type 1`] = `
ZodOptional {
  "_def": {
    "description": "Age of the pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodNumber {
      "_def": {
        "checks": [
          {
            "kind": "int",
            "message": undefined,
          },
        ],
        "coerce": false,
        "description": "Age of the pet that needs to be updated",
        "typeName": "ZodNumber",
      },
      "and": [Function],
      "array": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "max": [Function],
      "min": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "step": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'integer' type 1`] = `
ZodNumber {
  "_def": {
    "checks": [
      {
        "kind": "int",
        "message": undefined,
      },
    ],
    "coerce": false,
    "description": "ID of pet that needs to be updated",
    "typeName": "ZodNumber",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "max": [Function],
  "min": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "step": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'number' type 1`] = `
ZodOptional {
  "_def": {
    "description": "Height of the pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodNumber {
      "_def": {
        "checks": [],
        "coerce": false,
        "description": "Height of the pet that needs to be updated",
        "typeName": "ZodNumber",
      },
      "and": [Function],
      "array": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "max": [Function],
      "min": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "step": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'object' type 1`] = `
ZodOptional {
  "_def": {
    "description": "General informations about the pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodObject {
      "_cached": null,
      "_def": {
        "catchall": ZodNever {
          "_def": {
            "typeName": "ZodNever",
          },
          "and": [Function],
          "array": [Function],
          "brand": [Function],
          "catch": [Function],
          "default": [Function],
          "describe": [Function],
          "isNullable": [Function],
          "isOptional": [Function],
          "nullable": [Function],
          "nullish": [Function],
          "optional": [Function],
          "or": [Function],
          "parse": [Function],
          "parseAsync": [Function],
          "pipe": [Function],
          "promise": [Function],
          "readonly": [Function],
          "refine": [Function],
          "refinement": [Function],
          "safeParse": [Function],
          "safeParseAsync": [Function],
          "spa": [Function],
          "superRefine": [Function],
          "transform": [Function],
          "~standard": {
            "validate": [Function],
            "vendor": "zod",
            "version": 1,
          },
        },
        "description": "General informations about the pet that needs to be updated",
        "shape": [Function],
        "typeName": "ZodObject",
        "unknownKeys": "strip",
      },
      "and": [Function],
      "array": [Function],
      "augment": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "nonstrict": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;

exports[`extractors > should create a zod schema for a 'string' type 1`] = `
ZodOptional {
  "_def": {
    "description": "Name of pet that needs to be updated",
    "errorMap": [Function],
    "innerType": ZodString {
      "_def": {
        "checks": [],
        "coerce": false,
        "description": "Name of pet that needs to be updated",
        "typeName": "ZodString",
      },
      "and": [Function],
      "array": [Function],
      "brand": [Function],
      "catch": [Function],
      "default": [Function],
      "describe": [Function],
      "isNullable": [Function],
      "isOptional": [Function],
      "nullable": [Function],
      "nullish": [Function],
      "optional": [Function],
      "or": [Function],
      "parse": [Function],
      "parseAsync": [Function],
      "pipe": [Function],
      "promise": [Function],
      "readonly": [Function],
      "refine": [Function],
      "refinement": [Function],
      "safeParse": [Function],
      "safeParseAsync": [Function],
      "spa": [Function],
      "superRefine": [Function],
      "transform": [Function],
      "~standard": {
        "validate": [Function],
        "vendor": "zod",
        "version": 1,
      },
    },
    "typeName": "ZodOptional",
  },
  "and": [Function],
  "array": [Function],
  "brand": [Function],
  "catch": [Function],
  "default": [Function],
  "describe": [Function],
  "isNullable": [Function],
  "isOptional": [Function],
  "nullable": [Function],
  "nullish": [Function],
  "optional": [Function],
  "or": [Function],
  "parse": [Function],
  "parseAsync": [Function],
  "pipe": [Function],
  "promise": [Function],
  "readonly": [Function],
  "refine": [Function],
  "refinement": [Function],
  "safeParse": [Function],
  "safeParseAsync": [Function],
  "spa": [Function],
  "superRefine": [Function],
  "transform": [Function],
  "~standard": {
    "validate": [Function],
    "vendor": "zod",
    "version": 1,
  },
}
`;
